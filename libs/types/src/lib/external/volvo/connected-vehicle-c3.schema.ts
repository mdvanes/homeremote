/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/vehicles/{vin}/commands/unlock": {
        /**
         * Unlock doors
         * @description Used to send an unlock command to the vehicle.
         */
        post: operations["InvokeUnlock"];
    };
    "/v1/vehicles/{vin}/commands/navi-point-of-interest": {
        /**
         * Send navigation point of interest
         * @description Used to send a navigation-send command to the vehicle.
         */
        post: operations["InvokeNaviPointOfInterest"];
    };
    "/v2/vehicles/{vin}/commands/lock": {
        /**
         * Lock doors
         * @description Used to send a lock command to the vehicle.
         */
        post: operations["InvokeLock"];
    };
    "/v2/vehicles/{vin}/commands/honk": {
        /**
         * Honk horn
         * @description Used to send a honk command to the vehicle.
         */
        post: operations["InvokeHonk"];
    };
    "/v1/vehicles/{vin}/commands/honk-flash": {
        /**
         * Honk and flash
         * @description Deprecated. Will be replaced with a new version in v2. Used to send a honk-and-flash command to the vehicle.
         */
        post: operations["InvokeHonkAndFlash"];
    };
    "/v2/vehicles/{vin}/commands/flash": {
        /**
         * Flash exterior lights
         * @description Used to send a flash command to the vehicle.
         */
        post: operations["InvokeFlash"];
    };
    "/v2/vehicles/{vin}/commands/engine-stop": {
        /**
         * Stop Engine
         * @description Used to send a engine stop command to the vehicle.
         */
        post: operations["InvokeEngineStop"];
    };
    "/v2/vehicles/{vin}/commands/engine-start": {
        /**
         * Start Engine
         * @description Used to send a engine start command to the vehicle.
         */
        post: operations["InvokeEngineStart"];
    };
    "/v2/vehicles/{vin}/commands/climatization-stop": {
        /**
         * Stop climatisation
         * @description Used to send a climatisation stop command to the vehicle.
         */
        post: operations["InvokeClimatizationStop"];
    };
    "/v2/vehicles/{vin}/commands/climatization-start": {
        /**
         * Start climatisation
         * @description Used to send a climatisation start command to the vehicle.
         */
        post: operations["InvokeClimatizationStart"];
    };
    "/v1/vehicles": {
        /**
         * List vehicles
         * @description Provides all current valid relations between a Volvo Id (user) and its connected vehicles. Returns a list of VINs. Required Scope(s): conve:vehicle_relation
         */
        get: operations["GetVehicleList"];
    };
    "/v1/vehicles/{vin}": {
        /**
         * Get vehicle details
         * @description Provides details about the vehicle such as model, model-year etc. Required Scope(s): conve:vehicle_relation
         */
        get: operations["GetVehicleDetails"];
    };
    "/v1/vehicles/{vin}/windows": {
        /**
         * Get window status
         * @description Vehicle's Latest Window Status Values
         */
        get: operations["GetWindowStatus"];
    };
    "/v1/vehicles/{vin}/warnings": {
        /**
         * Get warnings
         * @description Vehicle's Latest Warning Values like bulb failure
         */
        get: operations["GetWarnings"];
    };
    "/v1/vehicles/{vin}/tyres": {
        /**
         * Get tyres status
         * @description Vehicle's Latest Tyre Pressure Values
         */
        get: operations["GetTyrePressureValues"];
    };
    "/v1/vehicles/{vin}/statistics": {
        /**
         * Get statistics
         * @description Vehicle's Latest Statistics such as average-speed, trip-meters
         */
        get: operations["GetStatistics"];
    };
    "/v1/vehicles/{vin}/requests": {
        /**
         * Deprecated. List sent commands
         * @description Deprecated since v2. Will be removed in next version. Used to get a list of the active and past command-requests invoked against the vehicle.
         */
        get: operations["ListCommandRequests"];
    };
    "/v1/vehicles/{vin}/requests/{id}": {
        /**
         * Deprecated. Get sent command details
         * @description Deprecated since v2. Will be removed in next version. Used to get the details of the command referenced by the id parameter.
         */
        get: operations["GetRequestDetails"];
    };
    "/v1/vehicles/{vin}/odometer": {
        /**
         * Get odometer value
         * @description Vehicle's latest odometer value in kilometers
         */
        get: operations["GetOdometer"];
    };
    "/v1/vehicles/{vin}/fuel": {
        /**
         * Get fuel amount
         * @description Vehicle's Latest Fuel Amount in Liters
         */
        get: operations["GetFuelAmount"];
    };
    "/v1/vehicles/{vin}/environment": {
        /**
         * Get external temperature
         * @description Environment Values such as external temperature collected by means of Vehicle sensors
         */
        get: operations["GetEnvironmentVals"];
    };
    "/v1/vehicles/{vin}/engine": {
        /**
         * Get engine diagnostic values
         * @description Vehicle's Latest Engine Diagnostic Values such as engine-coolant-level, oil level etc.
         */
        get: operations["GetEngineDiagnostics"];
    };
    "/v1/vehicles/{vin}/engine-status": {
        /**
         * Get engine status
         * @description Vehicle's Latest Engine Status Value like RUNNING or STOPPED
         */
        get: operations["GetWindowStatus_1"];
    };
    "/v1/vehicles/{vin}/doors": {
        /**
         * Get door and lock status
         * @description Vehicle's Door and Lock Status Values
         */
        get: operations["GetDoorAndLockStatus"];
    };
    "/v1/vehicles/{vin}/diagnostics": {
        /**
         * Get diagnostic values
         * @description Vehicle's Latest Diagnostic Values
         */
        get: operations["GetDiagnostics"];
    };
    "/v1/vehicles/{vin}/commands": {
        /**
         * List commands
         * @description Used to list the commands which can be sent to the vehicle
         */
        get: operations["GetCommandList"];
    };
    "/v1/vehicles/{vin}/command-accessibility": {
        /**
         * Get accessibility status
         * @description  Vehicle's network accessibility to send invocation commands, such as if vehicle is available and the date until it's accessible. If the vehicle is not available then i has gone into sleep mode and it's not possible to send commands towards the vehicle. To be able to do so you need to start the vehicle again.
         */
        get: operations["GetCommandsAccessibility"];
    };
    "/v1/vehicles/{vin}/brakes": {
        /**
         * Get brake fluid level
         * @description Vehicle's Latest Brake Status Values like brake fluid level
         */
        get: operations["GetBrakeStatus"];
    };
    "/v2/vehicles/{vin}/commands/pre-cleaning-stop": {
        /**
         * Stop cleaning air cabin
         * @description Used to send stop cleaning the air in cabin command to the vehicle.
         */
        post: operations["InvokePreCleaningStop"];
    };
    "/v2/vehicles/{vin}/commands/pre-cleaning-start": {
        /**
         * Start cleaning air cabin
         * @description Used to send start cleaning the air in cabin command to the vehicle.
         */
        post: operations["InvokePreCleaningStart"];
    };
    "/v2/vehicles/{vin}/commands/honk-flash": {
        /**
         * Honk and Flash
         * @description Used to send a honk & flash command to the vehicle.
         */
        post: operations["InvokeHonkFlash"];
    };
    "/v1/vehicles/{vin}/requests/search": {
        /**
         * Search sent commands
         * @description Deprecated since v2. Will be removed in next version. Used to perform an advanced search through the command-requests
         */
        post: operations["SearchCommandRequests"];
    };
    "/v1/vehicles/{vin}/commands/unlock": {
        /**
         * Unlock doors
         * @description Used to send a unlock command to the vehicle.
         */
        post: operations["InvokeUnlock_1"];
    };
    "/v1/vehicles/{vin}/commands/lock": {
        /**
         * Lock doors
         * @description Used to send a lock command to the vehicle.
         */
        post: operations["InvokeLock_1"];
    };
    "/v1/vehicles/{vin}/commands/honk": {
        /**
         * Honk horn
         * @description Deprecated. Will be replaced in v2. Used to send a honk command to the vehicle.
         */
        post: operations["InvokeHonk_1"];
    };
    "/v1/vehicles/{vin}/commands/flash": {
        /**
         * Flash exterior lights
         * @description Used to send a flash command to the vehicle.
         */
        post: operations["InvokeFlash_1"];
    };
    "/v1/vehicles/{vin}/commands/engine-stop": {
        /**
         * Stop engine
         * @description Used to send a engine-stop command to the vehicle.
         */
        post: operations["InvokeEngineStop_1"];
    };
    "/v1/vehicles/{vin}/commands/engine-start": {
        /**
         * Start engine
         * @description Used to send a engine-start command to the vehicle.
         */
        post: operations["InvokeEngineStart_1"];
    };
    "/v1/vehicles/{vin}/commands/climatization-stop": {
        /**
         * Stop climatization
         * @description Used to send a climatisation-stop command to the vehicle.
         */
        post: operations["InvokeClimatizationStop_1"];
    };
    "/v1/vehicles/{vin}/commands/climatization-start": {
        /**
         * Start climatization
         * @description Used to send a climatisation-start command to the vehicle.
         */
        post: operations["InvokeClimatizationStart_1"];
    };
    "/v1/vehicles/{vin}/battery-charge-level": {
        /**
         * Get battery charge level
         * @description Vehicle's Latest Battery Charge Level in Percentage
         */
        get: operations["getbatterychargelevel"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        Error: {
            message?: string;
            description?: string;
        };
        ErrorResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            error?: components["schemas"]["Error"];
        };
        InvocationResult: {
            vin?: string;
            status?: string;
            /** Format: int32 */
            statusCode?: number;
            operationId?: string;
            /** @enum {string} */
            invokeStatus?:
                | "WAITING"
                | "RUNNING"
                | "COMPLETED"
                | "REJECTED"
                | "UNKNOWN"
                | "TIMEOUT"
                | "CONNECTION_FAILURE"
                | "VEHICLE_IN_SLEEP"
                | "UNLOCK_TIME_FRAME_PASSED"
                | "UNABLE_TO_LOCK_DOOR_OPEN"
                | "SENT"
                | "NOT_SUPPORTED"
                | "CAR_IN_SLEEP_MODE"
                | "DELIVERED"
                | "DELIVERY_TIMEOUT"
                | "SUCCESS"
                | "CAR_TIMEOUT"
                | "CAR_ERROR"
                | "NOT_ALLOWED_PRIVACY_ENABLED"
                | "NOT_ALLOWED_WRONG_USAGE_MODE";
            message?: string;
        };
        EngineStartRequest: {
            /**
             * Format: int32
             * @description Time in minutes engine will be running. Can be set to maximum 15 minutes
             */
            runtimeMinutes?: number;
        };
        SearchCommandRequest: {
            commands?: (
                | "HONK_AND_FLASH"
                | "HONK"
                | "FLASH"
                | "LOCK"
                | "UNLOCK"
                | "ENGINE_START"
                | "ENGINE_STOP"
                | "CLIMATIZATION_START"
                | "CLIMATIZATION_STOP"
                | "DASHBOARD"
                | "NAVIGATION"
                | "SEND_NAVI_POI"
            )[];
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            ids?: string[];
        };
        CommandRequestDetailItem: {
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            /** @enum {string} */
            command?:
                | "HONK_AND_FLASH"
                | "HONK"
                | "FLASH"
                | "LOCK"
                | "UNLOCK"
                | "ENGINE_START"
                | "ENGINE_STOP"
                | "CLIMATIZATION_START"
                | "CLIMATIZATION_STOP"
                | "DASHBOARD"
                | "NAVIGATION"
                | "SEND_NAVI_POI";
            requestId?: string;
            /** @enum {string} */
            invokeStatus?:
                | "WAITING"
                | "RUNNING"
                | "COMPLETED"
                | "REJECTED"
                | "UNKNOWN"
                | "TIMEOUT"
                | "CONNECTION_FAILURE"
                | "VEHICLE_IN_SLEEP"
                | "UNLOCK_TIME_FRAME_PASSED"
                | "UNABLE_TO_LOCK_DOOR_OPEN"
                | "SENT"
                | "NOT_SUPPORTED"
                | "CAR_IN_SLEEP_MODE"
                | "DELIVERED"
                | "DELIVERY_TIMEOUT"
                | "SUCCESS"
                | "CAR_TIMEOUT"
                | "CAR_ERROR"
                | "NOT_ALLOWED_PRIVACY_ENABLED"
                | "NOT_ALLOWED_WRONG_USAGE_MODE";
            href?: string;
        };
        CommandRequestListResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["CommandRequestDetailItem"][];
            pagination?: components["schemas"]["Pagination"];
        };
        Pagination: {
            previous?: string;
            next?: string;
            /** Format: int32 */
            limit?: number;
        };
        UnlockRequest: {
            /**
             * Format: int32
             * @description Time in seconds that the doors can be unlocked. Can maximum be set to 120 seconds
             */
            unlockDuration?: number;
        };
        AsyncInfo: {
            status?: string;
            id?: string;
            href?: string;
            /** Format: date-time */
            expires?: string;
        };
        AsyncResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            partial?: components["schemas"]["Partial"];
            async?: components["schemas"]["AsyncInfo"];
        };
        Partial: {
            /** Format: int32 */
            currentStep?: number;
            /** Format: int32 */
            totalSteps?: number;
        };
        PointOfInterest: {
            /** Format: double */
            latitude?: number;
            /** Format: double */
            longitude?: number;
            name: string;
            phone?: string;
        };
        SendPoiToCarRequest: {
            pointsOfInterest: components["schemas"]["PointOfInterest"][];
        };
        VehicleListItem: {
            vin?: string;
        };
        VehicleListResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["VehicleListItem"][];
            pagination?: components["schemas"]["Pagination"];
        };
        DescriptionTexts: {
            model?: string;
            upholstery?: string;
            steering?: string;
        };
        VehicleDetailResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["VehicleMetadata"];
        };
        VehicleImages: {
            exteriorDefaultUrl?: string;
            interiorDefaultUrl?: string;
        };
        VehicleMetadata: {
            modelYear?: string;
            vin?: string;
            externalColour?: string;
            images?: components["schemas"]["VehicleImages"];
            descriptions?: components["schemas"]["DescriptionTexts"];
        };
        RInstance: {
            value?: string;
            /** Format: date-time */
            timestamp?: string;
        };
        WindowStatus: {
            frontLeft?: components["schemas"]["RInstance"];
            frontRight?: components["schemas"]["RInstance"];
            rearLeft?: components["schemas"]["RInstance"];
            rearRight?: components["schemas"]["RInstance"];
        };
        WindowStatusResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["WindowStatus"];
        };
        BaseResponseListResourceInstance: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["ResourceInstance"][];
        };
        ResourceInstance: {
            value?: string;
            unit?: string;
            /**
             * Format: int64
             * @description unix timestamp value
             * @example 1599996619.0
             */
            timestamp?: number;
        };
        WarningVals: {
            bulbFailure?: components["schemas"]["RInstance"];
        };
        WarningsResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["WarningVals"];
        };
        TyrePressure: {
            frontLeft?: components["schemas"]["RInstance"];
            frontRight?: components["schemas"]["RInstance"];
            rearLeft?: components["schemas"]["RInstance"];
            rearRight?: components["schemas"]["RInstance"];
        };
        TyrePressureResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["TyrePressure"];
        };
        RInstanceWithUnit: {
            value?: string;
            /** Format: date-time */
            timestamp?: string;
            unit?: string;
        };
        StatisticResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["StatisticVals"];
        };
        StatisticVals: {
            averageSpeed?: components["schemas"]["RInstanceWithUnit"];
            distanceToEmpty?: components["schemas"]["RInstanceWithUnit"];
            tripMeter1?: components["schemas"]["RInstanceWithUnit"];
            tripMeter2?: components["schemas"]["RInstanceWithUnit"];
            averageFuelConsumption?: components["schemas"]["RInstanceWithUnit"];
        };
        CommandRequestDetailResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["CommandRequestDetailItem"];
        };
        RechargeStatus: {
            batteryChargeLevel?: components["schemas"]["RInstanceWithUnit"];
            estimatedDistanceToEmptyKm?: components["schemas"]["RInstanceWithUnit"];
            estimatedDistanceToEmptyMiles?: components["schemas"]["RInstanceWithUnit"];
            estimatedChargingTime?: components["schemas"]["RInstanceWithUnit"];
            onboardChargerHandleStatus?: components["schemas"]["RInstance"];
            chargeStatus?: components["schemas"]["RInstance"];
            chargingType?: components["schemas"]["RInstance"];
            cancelHoldChargeRequest?: components["schemas"]["RInstance"];
        };
        RechargeStatusResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["RechargeStatus"];
        };
        Odometer: {
            odometer?: components["schemas"]["RInstanceWithUnit"];
        };
        OdometerResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["Odometer"];
        };
        Fuel: {
            fuelAmount?: components["schemas"]["RInstanceWithUnit"];
        };
        FuelAmountResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["Fuel"];
        };
        EnvironmentResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["EnvironmentVals"];
        };
        EnvironmentVals: {
            externalTemp?: components["schemas"]["RInstanceWithUnit"];
        };
        EngineDiagnosticResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["EngineDiagnosticVals"];
        };
        EngineDiagnosticVals: {
            engineCoolantLevel?: components["schemas"]["RInstance"];
            oilLevel?: components["schemas"]["RInstance"];
            oilPressure?: components["schemas"]["RInstance"];
            engineCoolantTemp?: components["schemas"]["RInstanceWithUnit"];
        };
        EngineStatus: {
            engineRunning?: components["schemas"]["RInstance"];
        };
        EngineStatusResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["EngineStatus"];
        };
        DoorAndLockStatus: {
            carLocked?: components["schemas"]["RInstance"];
            rearRight?: components["schemas"]["RInstance"];
            frontRight?: components["schemas"]["RInstance"];
            frontLeft?: components["schemas"]["RInstance"];
            rearLeft?: components["schemas"]["RInstance"];
            cap?: components["schemas"]["RInstance"];
            hood?: components["schemas"]["RInstance"];
            tailGate?: components["schemas"]["RInstance"];
        };
        DoorStatusResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["DoorAndLockStatus"];
        };
        DiagnosticResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["DiagnosticVals"];
        };
        DiagnosticVals: {
            engineHoursToService?: components["schemas"]["RInstance"];
            kmToService?: components["schemas"]["RInstanceWithUnit"];
            mainBatteryStatus?: components["schemas"]["RInstance"];
            monthsToService?: components["schemas"]["RInstance"];
            serviceType?: components["schemas"]["RInstance"];
            serviceStatus?: components["schemas"]["RInstance"];
            serviceTrigger?: components["schemas"]["RInstance"];
            backupBatteryRemaining?: components["schemas"]["RInstance"];
            washerFluidLevel?: components["schemas"]["RInstance"];
        };
        CommandListItem: {
            /** @enum {string} */
            command?:
                | "HONK_AND_FLASH"
                | "HONK"
                | "FLASH"
                | "LOCK"
                | "UNLOCK"
                | "ENGINE_START"
                | "ENGINE_STOP"
                | "CLIMATIZATION_START"
                | "CLIMATIZATION_STOP"
                | "DASHBOARD"
                | "NAVIGATION"
                | "SEND_NAVI_POI";
            href?: string;
        };
        CommandListResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["CommandListItem"][];
        };
        CommandAccessibility: {
            accessible?: boolean;
            /** Format: date-time */
            accessibleUntil?: string;
        };
        CommandAccessibilityResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["CommandAccessibility"];
        };
        BrakeStatus: {
            brakeFluid?: components["schemas"]["RInstance"];
        };
        BrakeStatusResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["BrakeStatus"];
        };
        BatteryCharge: {
            batteryChargeLevel?: components["schemas"]["RInstanceWithUnit"];
        };
        BatteryChargeLevelResponse: {
            /** Format: int32 */
            status?: number;
            operationId?: string;
            data?: components["schemas"]["BatteryCharge"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
    /**
     * Unlock doors
     * @description Used to send an unlock command to the vehicle.
     */
    InvokeUnlock: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.unlock.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Send navigation point of interest
     * @description Used to send a navigation-send command to the vehicle.
     */
    InvokeNaviPointOfInterest: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description The points of interest (POIs) to add. */
        requestBody?: {
            content: {
                /**
                 * @example {
                 *   "pointsOfInterest": [
                 *     {
                 *       "latitude": 0,
                 *       "longitude": 0,
                 *       "name": "string",
                 *       "phone": "string"
                 *     }
                 *   ]
                 * }
                 */
                "application/vnd.volvocars.api.connected-vehicle.navipointofinterest.v1+json": components["schemas"]["SendPoiToCarRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Lock doors
     * @description Used to send a lock command to the vehicle.
     */
    InvokeLock: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.lock.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Honk horn
     * @description Used to send a honk command to the vehicle.
     */
    InvokeHonk: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.honkandflash.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Honk and flash
     * @description Deprecated. Will be replaced with a new version in v2. Used to send a honk-and-flash command to the vehicle.
     */
    InvokeHonkAndFlash: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.honkandflash.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Flash exterior lights
     * @description Used to send a flash command to the vehicle.
     */
    InvokeFlash: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.honkandflash.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Stop Engine
     * @description Used to send a engine stop command to the vehicle.
     */
    InvokeEngineStop: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.enginestop.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Start Engine
     * @description Used to send a engine start command to the vehicle.
     */
    InvokeEngineStart: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description The minimum runtimeMinutes value is 0 and maximum 15. */
        requestBody?: {
            content: {
                /**
                 * @example {
                 *   "runtimeMinutes": 0
                 * }
                 */
                "application/vnd.volvocars.api.connected-vehicle.enginestart.v2+json": components["schemas"]["EngineStartRequest"];
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Stop climatisation
     * @description Used to send a climatisation stop command to the vehicle.
     */
    InvokeClimatizationStop: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.climatizationstop.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Start climatisation
     * @description Used to send a climatisation start command to the vehicle.
     */
    InvokeClimatizationStart: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.climatizationstart.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * List vehicles
     * @description Provides all current valid relations between a Volvo Id (user) and its connected vehicles. Returns a list of VINs. Required Scope(s): conve:vehicle_relation
     */
    GetVehicleList: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehiclelist.v1+json": components["schemas"]["VehicleListResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get vehicle details
     * @description Provides details about the vehicle such as model, model-year etc. Required Scope(s): conve:vehicle_relation
     */
    GetVehicleDetails: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicle.v1+json": components["schemas"]["VehicleDetailResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get window status
     * @description Vehicle's Latest Window Status Values
     */
    GetWindowStatus: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["WindowStatusResponse"];
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v2+json": components["schemas"]["WindowStatusResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get warnings
     * @description Vehicle's Latest Warning Values like bulb failure
     */
    GetWarnings: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["WarningsResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get tyres status
     * @description Vehicle's Latest Tyre Pressure Values
     */
    GetTyrePressureValues: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["TyrePressureResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get statistics
     * @description Vehicle's Latest Statistics such as average-speed, trip-meters
     */
    GetStatistics: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["StatisticResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Deprecated. List sent commands
     * @description Deprecated since v2. Will be removed in next version. Used to get a list of the active and past command-requests invoked against the vehicle.
     */
    ListCommandRequests: {
        parameters: {
            query: {
                /**
                 * @description Format - int32. number of the items to display in each result set. Default is 50
                 * @example 50
                 */
                limit?: number;
                /**
                 * @description an identifier to for the next page of the result
                 * @example 2537699f-e34e-4bef-9b78-0c56a52a2234
                 */
                after?: string;
            };
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.requestlist.v1+json": components["schemas"]["CommandRequestListResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Deprecated. Get sent command details
     * @description Deprecated since v2. Will be removed in next version. Used to get the details of the command referenced by the id parameter.
     */
    GetRequestDetails: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
                /**
                 * @description request identifier generated by Connected-Vehicle-API when the request has been received.
                 * @example 428d0ed994b678aff0dcf7f65391bdde
                 */
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.requestdetailresponse.v1+json": components["schemas"]["CommandRequestDetailResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get odometer value
     * @description Vehicle's latest odometer value in kilometers
     */
    GetOdometer: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["OdometerResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get fuel amount
     * @description Vehicle's Latest Fuel Amount in Liters
     */
    GetFuelAmount: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["FuelAmountResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get external temperature
     * @description Environment Values such as external temperature collected by means of Vehicle sensors
     */
    GetEnvironmentVals: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["EnvironmentResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get engine diagnostic values
     * @description Vehicle's Latest Engine Diagnostic Values such as engine-coolant-level, oil level etc.
     */
    GetEngineDiagnostics: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["EngineDiagnosticResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get engine status
     * @description Vehicle's Latest Engine Status Value like RUNNING or STOPPED
     */
    GetWindowStatus_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["EngineStatusResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get door and lock status
     * @description Vehicle's Door and Lock Status Values
     */
    GetDoorAndLockStatus: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["DoorStatusResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get diagnostic values
     * @description Vehicle's Latest Diagnostic Values
     */
    GetDiagnostics: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["DiagnosticResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * List commands
     * @description Used to list the commands which can be sent to the vehicle
     */
    GetCommandList: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandlist.v1+json": components["schemas"]["CommandListResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get accessibility status
     * @description  Vehicle's network accessibility to send invocation commands, such as if vehicle is available and the date until it's accessible. If the vehicle is not available then i has gone into sleep mode and it's not possible to send commands towards the vehicle. To be able to do so you need to start the vehicle again.
     */
    GetCommandsAccessibility: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commands.accessibility.v1+json": components["schemas"]["CommandAccessibilityResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get brake fluid level
     * @description Vehicle's Latest Brake Status Values like brake fluid level
     */
    GetBrakeStatus: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["BrakeStatusResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Stop cleaning air cabin
     * @description Used to send stop cleaning the air in cabin command to the vehicle.
     */
    InvokePreCleaningStop: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.precleaningstop.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Start cleaning air cabin
     * @description Used to send start cleaning the air in cabin command to the vehicle.
     */
    InvokePreCleaningStart: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.precleaningstart.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Honk and Flash
     * @description Used to send a honk & flash command to the vehicle.
     */
    InvokeHonkFlash: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.honkandflash.v2+json": unknown;
            };
        };
        responses: {
            /** @description Successful */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v2+json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Search sent commands
     * @description Deprecated since v2. Will be removed in next version. Used to perform an advanced search through the command-requests
     */
    SearchCommandRequests: {
        parameters: {
            query: {
                /**
                 * @description Format - int32. number of the items to display in each result set. Default is 50
                 * @example 50
                 */
                limit?: number;
                /**
                 * @description an identifier to for the next page of the result
                 * @example 2537699f-e34e-4bef-9b78-0c56a52a2234
                 */
                after?: string;
            };
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description request model encapsulating search filters such as request-ids, start-date and end-date */
        requestBody?: {
            content: {
                /**
                 * @example {
                 *   "commands": [
                 *     "HONK_AND_FLASH"
                 *   ],
                 *   "startDate": "string",
                 *   "endDate": "string",
                 *   "ids": [
                 *     "string"
                 *   ]
                 * }
                 */
                "application/vnd.volvocars.api.connected-vehicle.searchrequestlist.v1+json": components["schemas"]["SearchCommandRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.requestlist.v1+json": components["schemas"]["CommandRequestListResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Unlock doors
     * @description Used to send a unlock command to the vehicle.
     */
    InvokeUnlock_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Unlock command parameters such as unlock-duration */
        requestBody?: {
            content: {
                /**
                 * @example {
                 *   "unlockDuration": 0
                 * }
                 */
                "application/vnd.volvocars.api.connected-vehicle.unlock.v1+json": components["schemas"]["UnlockRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Lock doors
     * @description Used to send a lock command to the vehicle.
     */
    InvokeLock_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.lock.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Honk horn
     * @description Deprecated. Will be replaced in v2. Used to send a honk command to the vehicle.
     */
    InvokeHonk_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.honk.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Flash exterior lights
     * @description Used to send a flash command to the vehicle.
     */
    InvokeFlash_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.flash.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Stop engine
     * @description Used to send a engine-stop command to the vehicle.
     */
    InvokeEngineStop_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.enginestop.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Start engine
     * @description Used to send a engine-start command to the vehicle.
     */
    InvokeEngineStart_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Engine start action parameters like run-in-minutes */
        requestBody?: {
            content: {
                /**
                 * @example {
                 *   "runtimeMinutes": 0
                 * }
                 */
                "application/vnd.volvocars.api.connected-vehicle.enginestart.v1+json": components["schemas"]["EngineStartRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Stop climatization
     * @description Used to send a climatisation-stop command to the vehicle.
     */
    InvokeClimatizationStop_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.climatizationstop.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Start climatization
     * @description Used to send a climatisation-start command to the vehicle.
     */
    InvokeClimatizationStart_1: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        /** @description Empty request body for this command. */
        requestBody?: {
            content: {
                "application/vnd.volvocars.api.connected-vehicle.climatizationstart.v1+json": unknown;
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.commandinvokeresponse.v1+json": components["schemas"]["AsyncResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    /**
     * Get battery charge level
     * @description Vehicle's Latest Battery Charge Level in Percentage
     */
    getbatterychargelevel: {
        parameters: {
            header: {
                /** @description A transaction unique id which can be used do identify the transaction in integrated systems */
                "vcc-api-operationId"?: string;
            };
            path: {
                /**
                 * @description Vehicle identifier (VIN)
                 * @example YV1CT9551B1570982
                 */
                vin: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/vnd.volvocars.api.connected-vehicle.vehicledata.v1+json": components["schemas"]["BatteryChargeLevelResponse"];
                };
            };
            /** @description Request contains an unaccepted input */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unsupported Media Type */
            415: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Gateway Timeout */
            504: {
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}

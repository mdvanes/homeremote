/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/history/period/timestamp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Home Assistant Sensor History
         * @description Get Home Assistant Sensor History
         */
        get: operations["getHaSensorHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns an array of state objects. Each state object contains entity ID, state, and attributes.
         * @description Returns an array of state objects. Each state object contains entity ID, state, and attributes.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["States"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/states/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Home Assistant States
         * @description Get Home Assistant States
         */
        get: operations["getHaStates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Error information details */
        ErrorResponse: {
            /** @description Time when error happened */
            timestamp?: string;
            /**
             * Format: int32
             * @description Code describing the error
             */
            status?: number;
            /** @description Short error name */
            error?: string;
            /** @description Message explaining the error */
            message?: string;
            /**
             * Format: int32
             * @description Code of the error
             */
            code?: number;
        };
        GetHaSensorHistoryResponse: {
            /** @example sensor.tz3000_amqudjr0_ts0201_humidity */
            entity_id?: string;
            /** @example 65.9 */
            state?: string;
            attributes?: {
                /** @example measurement */
                state_class?: string;
                /** @example % */
                unit_of_measurement?: string;
                /** @example humidity */
                device_class?: string;
                /** @example Woox TempHumid 1 Humidity */
                friendly_name?: string;
            };
            /**
             * Format: date-time
             * @example 2024-05-05T17:05:08.795455+00:00
             */
            last_changed?: string;
            /**
             * Format: date-time
             * @example 2024-05-05T17:05:08.795455+00:00
             */
            last_reported?: string;
            /**
             * Format: date-time
             * @example 2024-05-05T17:05:08.795455+00:00
             */
            last_updated?: string;
            context?: {
                /** @example 01HWQC2MBD01BVZJP660G9JKXA */
                id?: string;
                /** Format: nullable */
                parent_id?: string;
                /** Format: nullable */
                user_id?: string;
            };
        }[][];
        State: {
            /** @example light.favorites */
            entity_id?: string;
            /** @example off */
            state?: string;
            attributes?: {
                supported_color_modes?: string[];
                /** Format: nullable */
                color_mode?: string;
                /** Format: nullable */
                brightness?: string;
                entity_id?: string[];
                /** @example mdi:lightbulb-group */
                icon?: string;
                /** @example Favorites */
                friendly_name?: string;
                /**
                 * Format: int32
                 * @example 0
                 */
                supported_features?: number;
                /**
                 * Format: nullable
                 * @description Undefined for switches. Can also be e.g. `temperature`.
                 */
                device_class?: string;
                /** @example measurement */
                state_class?: string;
                /**
                 * Format: nullable
                 * @example Â°C
                 */
                unit_of_measurement?: string;
            };
            /**
             * Format: date-time
             * @example 2024-05-21T13:16:22.061360+00:00
             */
            last_changed?: string;
            /**
             * Format: date-time
             * @example 2024-05-21T13:16:22.071293+00:00
             */
            last_reported?: string;
            /**
             * Format: date-time
             * @example 2024-05-21T13:16:22.061360+00:00
             */
            last_updated?: string;
            context?: {
                /** @example 01HYDMQE5DJ7QP3F5ADKNKXFDQ */
                id?: string;
                /** Format: nullable */
                parent_id?: string;
                /** Format: nullable */
                user_id?: string;
            };
        };
        /** @description An array of state objects. Each state object contains entity ID, state, attributes, and last changed time. */
        States: components["schemas"]["State"][];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHaSensorHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SensorHistory */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetHaSensorHistoryResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHaStates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity ID */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description HaStates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
